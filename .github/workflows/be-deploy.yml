name: Back deploy flow


on:  # workflow 실행 조건
  workflow_dispatch:
#   push:
#     branches:
#       - main # 메인 브랜치가 푸쉬된 경우

jobs: 
  build: 
    name: jib build & deploy
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./BE 

    steps: 
      - name: checkout Github Action
        uses: actions/checkout@v3 

      - name : Create env file 
        run: |
          echo "${{ secrets.BE_APPLICATION_PROD }}" >> application-prod.yml
          echo "${{ secrets.BE_LOG_APPENDER }}" >> file-appenders.xml
          sudo mkdir properties
          sudo chmod -R 777 ./properties
          cd properties
          echo "${{ secrets.BE_ENV_AUTH }}" >> auth.yml
          echo "${{ secrets.BE_ENV_DATASOURCE }}" >> datasource.yml
        working-directory: ./BE/src/main/resources

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Release API Image
        run: |
          ./gradlew jib -Dimage=${DOCKER_REGISTRY}/${DOCKER_REPOSITORY} -Dtag=${IMAGE_TAG}
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
          IMAGE_TAG: ${{ secrets.DOCKER_IMAGE_TAG }}
      

      - name: Deploy
        uses: appleboy/ssh-action@master
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
          IMAGE_TAG: ${{ secrets.DOCKER_IMAGE_TAG }}
        with:
          host: ${{ secrets.BE_SERVER_IP }}
          username: ubuntu
          key: ${{ secrets.BE_SERVER_TOKEN }}
          envs: DOCKER_REGISTRY,DOCKER_REPOSITORY,IMAGE_TAG
          script: |
            docker pull $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG
            docker stop sq-server
            docker run -d --rm --name sq-server -p 443:8080 -v server-log:/log $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG .


